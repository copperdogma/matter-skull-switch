## Matter Skull Switch Project Overview

**Purpose:** This project develops a Matter-enabled **On/Off Switch** using an ESP32-C3 SuperMini to control animatronic skulls and Halloween effects. When activated via Matter (Apple Home, Google Home, Amazon Alexa), the device sends a GPIO "GO!" signal to trigger audio playback on connected animatronic devices.

**Key Technologies:**
*   **Hardware:** ESP32-C3 SuperMini, GPIO output signal.
*   **Firmware:** ESP-IDF (Espressif IoT Development Framework).
*   **Connectivity:** Wi-Fi.
*   **Smart Home Protocol:** Matter 1.4.
*   **Device Type:** On/Off Switch with GPIO output control.

**Project Layout:**
The project is structured as follows:
```
matter-skull-switch/
├── credentials/        # Stores development certificates and factory data
│   └── dev-certs/
├── docs/               # Project documentation (circuit, specs, requirements, design, todo)
│   ├── skull-integration.md   # Wiring guide for animatronic integration
│   ├── spec.md               # Technical specifications
│   ├── circuit_diagram.md    # Hardware wiring diagram
│   └── todo.md              # Project tasks and enhancements
├── firmware/           # Main location for ESP32-C3 firmware
│   ├── main/           # Primary application code (e.g., app_main.cpp)
│   │   └── drivers/    # Custom drivers, if any
│   └── managed_components/ # ESP-IDF managed components (dependencies)
├── .gitattributes
├── .gitignore
├── README.md           # Main project README with overview and setup
├── scratchpad.md       # Tracks project setup phase tasks
└── SETUP.md            # Detailed setup instructions for the local development environment
```

**Key Files:**

*   **`README.md`**: Provides a general overview of the project, its goals, and basic setup instructions. Explains the animatronic skull control functionality.
*   **`SETUP.MD`**: Contains detailed, step-by-step instructions for setting up the local development environment using ESP-IDF and ESP-Matter. Includes skull-specific configuration.
*   **`docs/todo.md`**: Tracks ongoing tasks, issues, and future enhancements.
*   **`docs/spec.md`**: Technical specifications for the skull switch functionality.
*   **`docs/skull-integration.md`**: Detailed wiring guide for connecting to animatronic controllers.
*   **`firmware/main/app_main.cpp`**: The main application entry point for the ESP32 firmware implementing On/Off switch functionality.
*   **`firmware/sdkconfig`**: ESP-IDF project configuration file, generated by `menuconfig`. **You cannot modify this directly by running `menuconfig` as it is an interactive tool.** You can suggest changes to this file or ask the user to make specific changes using `idf.py menuconfig`.
*   **`firmware/CMakeLists.txt`**: Main CMake file for the firmware project.

**Hardware Configuration:**

The skull switch uses these GPIO connections:
*   **GPIO 3:** Signal output to animatronic controller ("GO!" pulse)

*   **GPIO 9:** BOOT button for factory reset (built-in)
*   **3.3V/GND:** Power and ground connections

**Signal Behavior:**
*   **Matter "ON" Command:** GPIO 3 goes HIGH (3.3V), triggering the animatronic device
*   **Matter "OFF" Command:** GPIO 3 goes LOW (0V), stopping/resetting the signal
*   **Pulse Mode:** Configurable pulse duration (default 500ms)

**Building the Project:**

The primary development and build environment is a local setup using the ESP-IDF and ESP-Matter SDKs, as detailed in `SETUP.MD`.

**Activating the Build Environment (Local Environment - CRITICAL):**
Before any `idf.py` commands will work in a new terminal session, you **MUST** activate the ESP-IDF and ESP-Matter environments by sourcing their respective `export.sh` scripts. These scripts set up necessary paths and environment variables.
1.  Open your terminal.
2.  Source the ESP-IDF environment:
    ```bash
    source ~/esp/esp-idf/export.sh
    ```
    *(Adjust the path `~/esp/esp-idf/` if your ESP-IDF installation is located elsewhere.)*
3.  Source the ESP-Matter environment:
    ```bash
    source ~/esp/esp-matter/export.sh
    ```
    *(Adjust the path `~/esp/esp-matter/` if your ESP-Matter installation is located elsewhere.)*
4.  (Optional but recommended for faster rebuilds) Enable ccache:
    ```bash
    export IDF_CCACHE_ENABLE=1
    ```
    *(Ensure `ccache` is installed on your system: `brew install ccache` on macOS, or `sudo apt install ccache` on Debian/Ubuntu.)*
5.  Verify by running `idf.py --version`. If it shows a version, the environment is active for that terminal session.

**General Build Process (Local Environment - after activating environment):**
1.  Navigate to the firmware directory (e.g., `cd firmware` from the project root).
2.  **Configuration (User Task):** If `sdkconfig` needs changes, instruct the user to run `idf.py menuconfig` and specify the exact changes to be made. **You cannot run `idf.py menuconfig` yourself.**
3.  Ensure the correct ESP-IDF target is set (e.g., `esp32c3`). If not, instruct the user: `idf.py set-target esp32c3`.
4.  Reconfigure if necessary (after target change or major `sdkconfig` changes): `idf.py reconfigure`.
5.  Build the project: `idf.py build`.

**Skull Switch Specific Configuration:**

For the animatronic skull control functionality:
*   **Device Type:** On/Off Switch (not Generic Switch)
*   **Clusters:** Basic, Identify, On/Off (Power Source for future battery support)
*   **GPIO Output:** Configured as output on GPIO 3
*   **Signal Logic:** HIGH = "GO!" signal, LOW = stop/reset
*   **Matter Integration:** Standard on/off commands trigger GPIO state changes

**Flashing the ESP32 (User Task):**
*   **You cannot flash the device directly.**
*   Provide the user with the command to flash the device, typically: `idf.py -p /dev/tty.usbmodemXXXX flash monitor` (the serial port `/dev/tty.usbmodemXXXX` will vary). The user must identify the correct port on their system.
*   Remind the user to put the ESP32-C3 into bootloader mode if necessary (usually by holding the BOOT button (often GPIO9), pressing RESET, then releasing BOOT).

**Multiple Skull Setup:**

For controlling multiple animatronic figures:
*   Each ESP32-C3 needs unique device certificates and identifiers
*   Flash each device with its own factory NVS partition
*   Commission each device separately in Matter controller
*   Group devices in scenes for synchronized Halloween effects
*   Each skull switch operates independently but can be coordinated

**Future Enhancements:**

*   **Battery Power:** LiPo battery with USB-C charging and voltage monitoring
*   **Power Source Cluster:** Report battery level to Matter controllers
*   **Scene Control:** Multiple trigger patterns for different effects
*   **Multiple GPIO Outputs:** Control multiple animatronic devices from one switch
*   **Pulse Patterns:** Different signal patterns for various effect types

**Important Reminders for AI:**
*   **Research First:** Do not guess. Search the web and use the mcp deepwiki tool to fetch up-to-date documentation based on our hardware and installed libraries/SDKs.
*   **Interactive Tools:** You **CANNOT** run interactive tools like `idf.py menuconfig`. You must guide the user on how to use them.
*   **Hardware Interaction:** You **CANNOT** flash the ESP32 chip or directly interact with hardware. Provide clear instructions for the user to perform these actions.
*   **Environment:** All ESP-IDF and Matter commands (`idf.py ...`) should be assumed to be run from the `firmware` directory of the project, **after successfully activating the build environment in your terminal session as described above.**
*   **Device Type:** This is an On/Off Switch, not a Generic Switch or sensor device
*   **GPIO Focus:** The core functionality is GPIO output control, not input sensing
*   Refer to `SETUP.MD` for complete environment setup commands and details, including initial SDK installation.
*   Consult `scratchpad.md` for current project status and `docs/todo.md` for outstanding tasks.
